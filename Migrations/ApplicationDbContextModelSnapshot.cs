// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fms;

namespace fms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("fms.Models.mtAgent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("portOfDestinationId");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("shipperId");

                    b.Property<int?>("typeId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("portOfDestinationId");

                    b.HasIndex("shipperId");

                    b.HasIndex("typeId");

                    b.ToTable("mtAgent");
                });

            modelBuilder.Entity("fms.Models.mtAgentDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("agentId");

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("agentId");

                    b.ToTable("mtAgentDetails");
                });

            modelBuilder.Entity("fms.Models.mtAgentProfitShared", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("agentId");

                    b.Property<int?>("containerId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<DateTime>("periodEnd");

                    b.Property<DateTime>("periodStart");

                    b.Property<int>("profitShared");

                    b.Property<int?>("shipperId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("agentId");

                    b.HasIndex("containerId");

                    b.HasIndex("shipperId");

                    b.ToTable("mtAgentProfitShared");
                });

            modelBuilder.Entity("fms.Models.mtBank", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtBank");

                    b.HasData(
                        new { id = 1, code = "BCA", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local), description = "PT. Bank Central Asia Tbk", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local) },
                        new { id = 2, code = "MANDIRI", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local), description = "PT. Bank Mandiri Tbk", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.mtChartOfAccount", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<int?>("currencyId")
                        .IsRequired();

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<int?>("parentId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("currencyId");

                    b.HasIndex("parentId");

                    b.ToTable("mtChartOfAccount");

                    b.HasData(
                        new { id = 1, code = "1-10001", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), currencyId = 1, description = "Cash", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 2, code = "6-60100", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), currencyId = 1, description = "General & Administrative Expenses", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 3, code = "6-60101", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), currencyId = 1, description = "Salaries", isActive = true, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.mtCompany", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("coaIdIdr");

                    b.Property<int?>("coaIdUsd");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("taxNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("typeId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("coaIdIdr");

                    b.HasIndex("coaIdUsd");

                    b.HasIndex("typeId");

                    b.ToTable("mtCompany");
                });

            modelBuilder.Entity("fms.Models.mtCompanyDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("companyId");

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("companyId");

                    b.ToTable("mtCompanyDetails");
                });

            modelBuilder.Entity("fms.Models.mtConsignee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("countryId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("dog")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("referenceNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("mtConsignee");
                });

            modelBuilder.Entity("fms.Models.mtContainer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("cubicCapacity")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("doorOpening")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("interiorDimension")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("payload")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("tareWeight")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("typeofContainer")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtContainer");
                });

            modelBuilder.Entity("fms.Models.mtCountry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtCountry");

                    b.HasData(
                        new { id = 1, code = "INA", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 414, DateTimeKind.Local), description = "Indonesia", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 421, DateTimeKind.Local) },
                        new { id = 2, code = "USA", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local), description = "United State of America", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.mtCurrency", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtCurrency");

                    b.HasData(
                        new { id = 1, code = "IDR", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local), description = "Indonesian Rupiah", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local) },
                        new { id = 2, code = "USD", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local), description = "US Dollar", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 422, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.mtCurrencyRate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<int?>("currencyIdFrom");

                    b.Property<int?>("currencyIdTo");

                    b.Property<bool>("isActive");

                    b.Property<double>("rate");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<DateTime>("validFrom");

                    b.Property<DateTime>("validTo");

                    b.HasKey("id");

                    b.HasIndex("currencyIdFrom");

                    b.HasIndex("currencyIdTo");

                    b.ToTable("mtCurrencyRate");
                });

            modelBuilder.Entity("fms.Models.mtDepoContainer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("mtDepoContainer");
                });

            modelBuilder.Entity("fms.Models.mtDepoContainerDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<int>("depoContainerId");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("depoContainerId");

                    b.ToTable("mtDepoContainerDetails");
                });

            modelBuilder.Entity("fms.Models.mtEmployee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("initial")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<DateTime>("joinDate");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("pictureUrl")
                        .IsRequired();

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtEmployee");
                });

            modelBuilder.Entity("fms.Models.mtGroups", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtGroups");
                });

            modelBuilder.Entity("fms.Models.mtLocation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtLocation");
                });

            modelBuilder.Entity("fms.Models.mtOrders", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtOrders");
                });

            modelBuilder.Entity("fms.Models.mtPortOfDestination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("countryId")
                        .IsRequired();

                    b.Property<int?>("countryIdTransit")
                        .IsRequired();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.HasIndex("countryIdTransit");

                    b.ToTable("mtPortOfDestination");
                });

            modelBuilder.Entity("fms.Models.mtPortOfLoading", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("countryId")
                        .IsRequired();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("port")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("mtPortOfLoading");
                });

            modelBuilder.Entity("fms.Models.mtPortTerminal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("portOfLoadingId");

                    b.Property<string>("terminalPort")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("portOfLoadingId");

                    b.ToTable("mtPortTerminal");
                });

            modelBuilder.Entity("fms.Models.mtProfitShared", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("agentId");

                    b.Property<int?>("countryId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("inputBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<int?>("mtContainerid");

                    b.Property<int>("psCondition");

                    b.Property<double>("psForAgent");

                    b.Property<double>("rebateForTsk");

                    b.Property<string>("refNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("txDate");

                    b.Property<DateTime>("txValidDate");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("agentId");

                    b.HasIndex("countryId");

                    b.HasIndex("mtContainerid");

                    b.ToTable("mtProfitShared");
                });

            modelBuilder.Entity("fms.Models.mtProfitSharedDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("containerId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("profitSharedId");

                    b.Property<double>("psDueForAgent");

                    b.Property<double>("psDueForTsk");

                    b.Property<double>("psForAgent");

                    b.Property<double>("psForTsk");

                    b.Property<string>("refNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("containerId");

                    b.HasIndex("profitSharedId");

                    b.ToTable("mtProfitSharedDetails");
                });

            modelBuilder.Entity("fms.Models.mtServices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("coaIdIdr");

                    b.Property<int?>("coaIdUsd");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("groupId");

                    b.Property<bool>("hargaPerCon");

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("coaIdIdr");

                    b.HasIndex("coaIdUsd");

                    b.HasIndex("groupId");

                    b.ToTable("mtServices");
                });

            modelBuilder.Entity("fms.Models.mtShipper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("attention")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("block")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("coaIdIdr");

                    b.Property<int?>("coaIdUsd");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("employeeId");

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("qq")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("subDistrict")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("subVillage")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("taxNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("village")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("coaIdIdr");

                    b.HasIndex("coaIdUsd");

                    b.HasIndex("employeeId");

                    b.ToTable("mtShipper");
                });

            modelBuilder.Entity("fms.Models.mtShipperDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("shipperId");

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("shipperId");

                    b.ToTable("mtShipperDetails");
                });

            modelBuilder.Entity("fms.Models.mtTax", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("amount");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtTax");
                });

            modelBuilder.Entity("fms.Models.mtType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("category");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("mtType");

                    b.HasData(
                        new { id = 1, category = 1, code = "FMG", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "FUMIGASI", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 2, category = 1, code = "INS", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "INSURANCE", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 3, category = 2, code = "TRUCKING", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "TRUCKING", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 4, category = 2, code = "SHIPPING", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "SHIPPING", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 5, category = 2, code = "COLOADER", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "COLOADER", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 6, category = 2, code = "WAREHOUSE", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "WAREHOUSE", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 7, category = 2, code = "INSURANCE", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "INSURANCE", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 8, category = 2, code = "FUMIGASI", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "FUMIGASI", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 9, category = 2, code = "UNDERNAME", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "UNDERNAME", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 10, category = 3, code = "AGENT TSK", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "AGENT TSK", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 11, category = 3, code = "SHIPPING LINE AGENT", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "SHIPPING LINE AGENT", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) },
                        new { id = 12, category = 3, code = "CO LOADER", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local), description = "CO LOADER", isActive = true, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 423, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.mtVendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("attention")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("block")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("coaIdIdr");

                    b.Property<int?>("coaIdUsd");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("subDistrict")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("subVillage")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("typeId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("village")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("coaIdIdr");

                    b.HasIndex("coaIdUsd");

                    b.HasIndex("typeId");

                    b.ToTable("mtVendor");
                });

            modelBuilder.Entity("fms.Models.mtVendorDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("vendorId");

                    b.HasKey("id");

                    b.HasIndex("vendorId");

                    b.ToTable("mtVendorDetails");
                });

            modelBuilder.Entity("fms.Models.mtWarehouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("block")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("coaIdIdr");

                    b.Property<int?>("coaIdUsd");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("subDistrict")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("subVillage")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("taxNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("village")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("coaIdIdr");

                    b.HasIndex("coaIdUsd");

                    b.ToTable("mtWarehouse");
                });

            modelBuilder.Entity("fms.Models.mtWarehouseDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("contactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("handphone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("telepon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("warehouseId");

                    b.HasKey("id");

                    b.HasIndex("warehouseId");

                    b.ToTable("mtWarehouseDetails");
                });

            modelBuilder.Entity("fms.Models.sysDocNo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("documentType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("isActive");

                    b.Property<int>("lastDay");

                    b.Property<int>("lastMonth");

                    b.Property<int>("lastYear");

                    b.Property<string>("module")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("nextDocNo");

                    b.Property<string>("numberFormat")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("resetLevel");

                    b.Property<string>("suffix")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("sysDocNo");

                    b.HasData(
                        new { id = 1, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local), documentType = "RefNo", isActive = true, lastDay = 1, lastMonth = 1, lastYear = 2018, module = "SellingShipper", nextDocNo = 1, numberFormat = "0000", prefix = "SQXP-%YYYY%%mm%", resetLevel = 2, suffix = "", updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local) },
                        new { id = 2, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local), documentType = "RefNo", isActive = true, lastDay = 1, lastMonth = 1, lastYear = 2018, module = "CostShipping", nextDocNo = 1, numberFormat = "0000", prefix = "QSLXP-%YYYY%%mm%", resetLevel = 2, suffix = "", updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local) },
                        new { id = 3, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local), documentType = "Image", isActive = true, lastDay = 1, lastMonth = 1, lastYear = 2018, module = "Employee", nextDocNo = 1, numberFormat = "0000", prefix = "%YYYY%%mm%%dd%", resetLevel = 1, suffix = "", updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 424, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.sysModule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("controller")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("hasChild");

                    b.Property<bool>("isActive");

                    b.Property<int>("level");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("orderModule");

                    b.Property<int?>("parentId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("view")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("parentId");

                    b.ToTable("sysModule");

                    b.HasData(
                        new { id = 1, code = "Dashboard", controller = "Dashboard", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 1, name = "Dashboard", orderModule = 1, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "" },
                        new { id = 2, code = "Master", controller = "", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = true, isActive = true, level = 1, name = "Master", orderModule = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "" },
                        new { id = 3, code = "Transaction", controller = "", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = true, isActive = true, level = 1, name = "Transaction", orderModule = 3, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "" },
                        new { id = 4, code = "Agent", controller = "Agent", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Agent", orderModule = 1, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 5, code = "AgentProfitShared", controller = "AgentProfitShared", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Agent Profit Shared", orderModule = 2, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 6, code = "Bank", controller = "Bank", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Bank", orderModule = 3, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 7, code = "ChartOfAccount", controller = "ChartOfAccount", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Chart Of Account", orderModule = 4, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 8, code = "Company", controller = "Company", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Fumigasi & Insurance", orderModule = 5, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 9, code = "Consignee", controller = "Consignee", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Consignee", orderModule = 6, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 10, code = "Container", controller = "Container", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Container", orderModule = 7, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 11, code = "Country", controller = "Country", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Country", orderModule = 8, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 12, code = "Currency", controller = "Currency", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Currency", orderModule = 9, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 13, code = "CurrencyRate", controller = "CurrencyRate", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Currency Rate", orderModule = 10, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 14, code = "DepoContainer", controller = "DepoContainer", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Depo Container", orderModule = 11, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 15, code = "Employee", controller = "Employee", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Employee", orderModule = 12, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 16, code = "Groups", controller = "Groups", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Groups", orderModule = 13, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 17, code = "Orders", controller = "Orders", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Orders", orderModule = 16, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 18, code = "Location", controller = "Location", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Location", orderModule = 17, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 19, code = "PortOfDestination", controller = "PortOfDestination", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Port Of Destination", orderModule = 18, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 20, code = "PortOfLoading", controller = "PortOfLoading", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Port Of Loading", orderModule = 19, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 21, code = "PortTerminal", controller = "PortTerminal", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Port Terminal", orderModule = 21, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 22, code = "ProfitShared", controller = "ProfitShared", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Profit Shared", orderModule = 22, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 23, code = "Service", controller = "Services", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Service", orderModule = 23, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 24, code = "Shipper", controller = "Shipper", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Shipper", orderModule = 24, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 25, code = "Tax", controller = "Tax", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Tax", orderModule = 25, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 26, code = "Type", controller = "Type", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Type", orderModule = 26, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 27, code = "Vendor", controller = "Vendor", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Vendor", orderModule = 27, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 28, code = "Warehouse", controller = "Warehouse", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Warehouse", orderModule = 28, parentId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 29, code = "CostShipping", controller = "CostShipping", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Cost Shipping", orderModule = 1, parentId = 3, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Index" },
                        new { id = 30, code = "SellingShipper", controller = "SellingShipper", createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), hasChild = false, isActive = true, level = 2, name = "Selling Shipper", orderModule = 2, parentId = 3, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), view = "Create" }
                    );
                });

            modelBuilder.Entity("fms.Models.sysModuleRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDefault");

                    b.Property<int>("moduleId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("userRoleId");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.HasIndex("userRoleId");

                    b.ToTable("sysModuleRole");

                    b.HasData(
                        new { id = 1, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = true, moduleId = 1, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 2, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 2, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 3, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 3, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 4, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 4, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 5, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 5, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 6, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 6, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 7, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 7, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 8, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 8, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 9, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 9, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 10, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 10, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 11, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 11, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 12, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 12, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 13, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 13, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 14, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 14, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 15, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 15, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 16, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 16, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 17, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 17, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 18, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 18, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 19, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 19, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 20, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 20, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 21, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 21, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 22, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 22, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 23, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 23, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 24, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 24, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 25, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 25, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 26, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 26, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 27, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 27, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 28, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 28, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 29, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 29, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 },
                        new { id = 30, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), isActive = true, isDefault = false, moduleId = 30, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 448, DateTimeKind.Local), userRoleId = 1 }
                    );
                });

            modelBuilder.Entity("fms.Models.sysUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("roleId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.ToTable("sysUser");

                    b.HasData(
                        new { id = 1, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 447, DateTimeKind.Local), email = "", isActive = true, name = "Administrator", password = "XMj64dzz0qOMj2sA6LHbJ6E4aGxNP7gRRN9SYi48OA7E+iL3", roleId = 1, updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 447, DateTimeKind.Local), username = "admin" }
                    );
                });

            modelBuilder.Entity("fms.Models.sysUserRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.ToTable("sysUserRole");

                    b.HasData(
                        new { id = 1, createdBy = "admin", createdOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local), description = "Super Administrator", isActive = true, name = "Super Admin", updatedBy = "admin", updatedOn = new DateTime(2018, 11, 26, 19, 14, 38, 425, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("fms.Models.trCostShipping", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("portOfLoadingId");

                    b.Property<string>("referenceNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("sales")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("shippingReferenceNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("txDate");

                    b.Property<DateTime>("txValidDate");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("vendorId");

                    b.HasKey("id");

                    b.HasIndex("portOfLoadingId");

                    b.HasIndex("vendorId");

                    b.ToTable("trCostShipping");
                });

            modelBuilder.Entity("fms.Models.trCostShippingDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("allIn");

                    b.Property<int>("containerId");

                    b.Property<int>("costShippingId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<int>("currencyId");

                    b.Property<bool>("isActive");

                    b.Property<string>("payable")
                        .IsRequired();

                    b.Property<int>("pcPay");

                    b.Property<int>("portOfDestinationId");

                    b.Property<int>("portTerminalId");

                    b.Property<decimal>("price");

                    b.Property<decimal>("refund");

                    b.Property<int>("refundType");

                    b.Property<string>("remark")
                        .HasMaxLength(500);

                    b.Property<int>("serviceId");

                    b.Property<int>("taxId23");

                    b.Property<int>("taxIdvat");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("vendorId");

                    b.HasKey("id");

                    b.HasIndex("containerId");

                    b.HasIndex("costShippingId");

                    b.HasIndex("currencyId");

                    b.HasIndex("portOfDestinationId");

                    b.HasIndex("portTerminalId");

                    b.HasIndex("serviceId");

                    b.HasIndex("taxId23");

                    b.HasIndex("taxIdvat");

                    b.HasIndex("vendorId");

                    b.ToTable("trCostShippingDetail");
                });

            modelBuilder.Entity("fms.Models.trCostShippingDetailShipper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("costShippingDetailId");

                    b.Property<int>("costShippingId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<string>("shipperCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("shipperId");

                    b.Property<string>("shipperName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("costShippingDetailId");

                    b.HasIndex("costShippingId");

                    b.HasIndex("shipperId");

                    b.ToTable("trCostShippingDetailShipper");
                });

            modelBuilder.Entity("fms.Models.trCostShippingService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("containerId");

                    b.Property<int>("costShippingId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("ofEmkl");

                    b.Property<int>("pcPay");

                    b.Property<int>("portOfDestinationId");

                    b.Property<string>("remark")
                        .HasMaxLength(500);

                    b.Property<int>("serviceId");

                    b.Property<int>("taxId23");

                    b.Property<int>("taxIdvat");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("containerId");

                    b.HasIndex("costShippingId");

                    b.HasIndex("portOfDestinationId");

                    b.HasIndex("serviceId");

                    b.HasIndex("taxId23");

                    b.HasIndex("taxIdvat");

                    b.ToTable("trCostShippingService");
                });

            modelBuilder.Entity("fms.Models.trSellingShipper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<string>("employeeCc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("employeeId");

                    b.Property<bool>("isActive");

                    b.Property<int>("portOfLoadingId");

                    b.Property<string>("referenceNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("remarkEmkl")
                        .HasMaxLength(500);

                    b.Property<string>("remarkQuo")
                        .HasMaxLength(500);

                    b.Property<string>("shipperAttention")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("shipperCc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("shipperId");

                    b.Property<int>("termOfPayment");

                    b.Property<DateTime>("txDate");

                    b.Property<DateTime>("txValidDate");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("portOfLoadingId");

                    b.HasIndex("shipperId");

                    b.ToTable("trSellingShipper");
                });

            modelBuilder.Entity("fms.Models.trSellingShipperDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("allIn");

                    b.Property<int>("consigneeId");

                    b.Property<int>("containerId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<int>("currencyId");

                    b.Property<bool>("isActive");

                    b.Property<int>("locationId");

                    b.Property<int>("ofEmkl");

                    b.Property<int>("orderId");

                    b.Property<string>("payable")
                        .IsRequired();

                    b.Property<int>("portOfDestinationId");

                    b.Property<decimal>("price");

                    b.Property<decimal>("refund");

                    b.Property<int>("refundType");

                    b.Property<string>("remark")
                        .HasMaxLength(500);

                    b.Property<int>("sellingShipperId");

                    b.Property<int>("serviceId");

                    b.Property<int>("taxId23");

                    b.Property<int>("taxIdvat");

                    b.Property<int>("truckingCondition");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<int>("vendorId");

                    b.HasKey("id");

                    b.HasIndex("consigneeId");

                    b.HasIndex("containerId");

                    b.HasIndex("currencyId");

                    b.HasIndex("locationId");

                    b.HasIndex("orderId");

                    b.HasIndex("portOfDestinationId");

                    b.HasIndex("sellingShipperId");

                    b.HasIndex("serviceId");

                    b.HasIndex("taxId23");

                    b.HasIndex("taxIdvat");

                    b.HasIndex("vendorId");

                    b.ToTable("trSellingShipperDetail");
                });

            modelBuilder.Entity("fms.Models.trSellingShipperDetailVendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("sellingShipperDetailId");

                    b.Property<int>("sellingShipperId");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.Property<string>("vendorCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("vendorId");

                    b.Property<string>("vendorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("sellingShipperDetailId");

                    b.HasIndex("sellingShipperId");

                    b.HasIndex("vendorId");

                    b.ToTable("trSellingShipperDetailVendor");
                });

            modelBuilder.Entity("fms.Models.trSellingShipperService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("containerId");

                    b.Property<string>("createdBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("createdOn");

                    b.Property<bool>("isActive");

                    b.Property<int>("ofEmkl");

                    b.Property<int>("pcPay");

                    b.Property<int>("portOfDestinationId");

                    b.Property<string>("remark")
                        .HasMaxLength(500);

                    b.Property<int>("sellingShipperId");

                    b.Property<int>("serviceId");

                    b.Property<int>("taxId23");

                    b.Property<int>("taxIdvat");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("id");

                    b.HasIndex("containerId");

                    b.HasIndex("portOfDestinationId");

                    b.HasIndex("sellingShipperId");

                    b.HasIndex("serviceId");

                    b.HasIndex("taxId23");

                    b.HasIndex("taxIdvat");

                    b.ToTable("trSellingShipperService");
                });

            modelBuilder.Entity("fms.Models.mtAgent", b =>
                {
                    b.HasOne("fms.Models.mtPortOfDestination", "portOfDestination")
                        .WithMany("agents")
                        .HasForeignKey("portOfDestinationId");

                    b.HasOne("fms.Models.mtShipper", "shipper")
                        .WithMany("agents")
                        .HasForeignKey("shipperId");

                    b.HasOne("fms.Models.mtType", "type")
                        .WithMany("agents")
                        .HasForeignKey("typeId");
                });

            modelBuilder.Entity("fms.Models.mtAgentDetails", b =>
                {
                    b.HasOne("fms.Models.mtAgent", "agent")
                        .WithMany("agentDetails")
                        .HasForeignKey("agentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtAgentProfitShared", b =>
                {
                    b.HasOne("fms.Models.mtAgent", "agent")
                        .WithMany("agentProfitShareds")
                        .HasForeignKey("agentId");

                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany("agentProfitShareds")
                        .HasForeignKey("containerId");

                    b.HasOne("fms.Models.mtShipper", "shipper")
                        .WithMany("profitShareds")
                        .HasForeignKey("shipperId");
                });

            modelBuilder.Entity("fms.Models.mtChartOfAccount", b =>
                {
                    b.HasOne("fms.Models.mtCurrency", "currency")
                        .WithMany("chartOfAccounts")
                        .HasForeignKey("currencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtChartOfAccount", "chartOfAccount")
                        .WithMany("chartOfAccounts")
                        .HasForeignKey("parentId");
                });

            modelBuilder.Entity("fms.Models.mtCompany", b =>
                {
                    b.HasOne("fms.Models.mtChartOfAccount", "coaIdr")
                        .WithMany()
                        .HasForeignKey("coaIdIdr");

                    b.HasOne("fms.Models.mtChartOfAccount", "coaUsd")
                        .WithMany()
                        .HasForeignKey("coaIdUsd");

                    b.HasOne("fms.Models.mtType", "type")
                        .WithMany("company")
                        .HasForeignKey("typeId");
                });

            modelBuilder.Entity("fms.Models.mtCompanyDetails", b =>
                {
                    b.HasOne("fms.Models.mtCompany", "company")
                        .WithMany("companyDetails")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtConsignee", b =>
                {
                    b.HasOne("fms.Models.mtCountry", "country")
                        .WithMany("consignees")
                        .HasForeignKey("countryId");
                });

            modelBuilder.Entity("fms.Models.mtCurrencyRate", b =>
                {
                    b.HasOne("fms.Models.mtCurrency", "currencyFrom")
                        .WithMany()
                        .HasForeignKey("currencyIdFrom");

                    b.HasOne("fms.Models.mtCurrency", "currencyTo")
                        .WithMany()
                        .HasForeignKey("currencyIdTo");
                });

            modelBuilder.Entity("fms.Models.mtDepoContainerDetails", b =>
                {
                    b.HasOne("fms.Models.mtDepoContainer", "depoContainer")
                        .WithMany("depoContainerDetails")
                        .HasForeignKey("depoContainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtPortOfDestination", b =>
                {
                    b.HasOne("fms.Models.mtCountry", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtCountry", "countryTransit")
                        .WithMany()
                        .HasForeignKey("countryIdTransit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtPortOfLoading", b =>
                {
                    b.HasOne("fms.Models.mtCountry", "country")
                        .WithMany("portOfLoadings")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtPortTerminal", b =>
                {
                    b.HasOne("fms.Models.mtPortOfLoading", "portOfLoading")
                        .WithMany("portTerminals")
                        .HasForeignKey("portOfLoadingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtProfitShared", b =>
                {
                    b.HasOne("fms.Models.mtAgent", "agents")
                        .WithMany("profitShareds")
                        .HasForeignKey("agentId");

                    b.HasOne("fms.Models.mtCountry", "country")
                        .WithMany("profitShareds")
                        .HasForeignKey("countryId");

                    b.HasOne("fms.Models.mtContainer")
                        .WithMany("profitShareds")
                        .HasForeignKey("mtContainerid");
                });

            modelBuilder.Entity("fms.Models.mtProfitSharedDetails", b =>
                {
                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany()
                        .HasForeignKey("containerId");

                    b.HasOne("fms.Models.mtProfitShared", "profitShared")
                        .WithMany("profitSharedDetails")
                        .HasForeignKey("profitSharedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtServices", b =>
                {
                    b.HasOne("fms.Models.mtChartOfAccount", "coaIdr")
                        .WithMany()
                        .HasForeignKey("coaIdIdr");

                    b.HasOne("fms.Models.mtChartOfAccount", "coaUsd")
                        .WithMany()
                        .HasForeignKey("coaIdUsd");

                    b.HasOne("fms.Models.mtGroups", "groups")
                        .WithMany("services")
                        .HasForeignKey("groupId");
                });

            modelBuilder.Entity("fms.Models.mtShipper", b =>
                {
                    b.HasOne("fms.Models.mtChartOfAccount", "coaIdr")
                        .WithMany()
                        .HasForeignKey("coaIdIdr");

                    b.HasOne("fms.Models.mtChartOfAccount", "coaUsd")
                        .WithMany()
                        .HasForeignKey("coaIdUsd");

                    b.HasOne("fms.Models.mtEmployee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId");
                });

            modelBuilder.Entity("fms.Models.mtShipperDetails", b =>
                {
                    b.HasOne("fms.Models.mtShipper", "shipper")
                        .WithMany("shipperDetails")
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtVendor", b =>
                {
                    b.HasOne("fms.Models.mtChartOfAccount", "coaIdr")
                        .WithMany()
                        .HasForeignKey("coaIdIdr");

                    b.HasOne("fms.Models.mtChartOfAccount", "coaUsd")
                        .WithMany()
                        .HasForeignKey("coaIdUsd");

                    b.HasOne("fms.Models.mtType", "type")
                        .WithMany("vendors")
                        .HasForeignKey("typeId");
                });

            modelBuilder.Entity("fms.Models.mtVendorDetails", b =>
                {
                    b.HasOne("fms.Models.mtVendor", "vendor")
                        .WithMany("vendorDetails")
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.mtWarehouse", b =>
                {
                    b.HasOne("fms.Models.mtChartOfAccount", "coaIdr")
                        .WithMany()
                        .HasForeignKey("coaIdIdr");

                    b.HasOne("fms.Models.mtChartOfAccount", "coaUsd")
                        .WithMany()
                        .HasForeignKey("coaIdUsd");
                });

            modelBuilder.Entity("fms.Models.mtWarehouseDetails", b =>
                {
                    b.HasOne("fms.Models.mtWarehouse", "warehouses")
                        .WithMany("warehouseDetails")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.sysModule", b =>
                {
                    b.HasOne("fms.Models.sysModule", "module")
                        .WithMany()
                        .HasForeignKey("parentId");
                });

            modelBuilder.Entity("fms.Models.sysModuleRole", b =>
                {
                    b.HasOne("fms.Models.sysModule", "module")
                        .WithMany("moduleRoles")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.sysUserRole", "userRole")
                        .WithMany("moduleRoles")
                        .HasForeignKey("userRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.sysUser", b =>
                {
                    b.HasOne("fms.Models.sysUserRole", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trCostShipping", b =>
                {
                    b.HasOne("fms.Models.mtPortOfLoading", "portOfLoading")
                        .WithMany()
                        .HasForeignKey("portOfLoadingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtVendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trCostShippingDetail", b =>
                {
                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany()
                        .HasForeignKey("containerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trCostShipping", "costShipping")
                        .WithMany("costShippingDetails")
                        .HasForeignKey("costShippingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtCurrency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortOfDestination", "portOfDestination")
                        .WithMany()
                        .HasForeignKey("portOfDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortTerminal", "portTerminal")
                        .WithMany()
                        .HasForeignKey("portTerminalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtServices", "services")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "tax23")
                        .WithMany()
                        .HasForeignKey("taxId23")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "vat")
                        .WithMany()
                        .HasForeignKey("taxIdvat")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtVendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trCostShippingDetailShipper", b =>
                {
                    b.HasOne("fms.Models.trCostShippingDetail", "costShippingDetail")
                        .WithMany("costShippingDetailShippers")
                        .HasForeignKey("costShippingDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trCostShipping", "costShipping")
                        .WithMany()
                        .HasForeignKey("costShippingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtShipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trCostShippingService", b =>
                {
                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany()
                        .HasForeignKey("containerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trCostShipping", "costShipping")
                        .WithMany("costShippingServices")
                        .HasForeignKey("costShippingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortOfDestination", "portOfDestination")
                        .WithMany()
                        .HasForeignKey("portOfDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtServices", "services")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "tax23")
                        .WithMany()
                        .HasForeignKey("taxId23")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "vat")
                        .WithMany()
                        .HasForeignKey("taxIdvat")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trSellingShipper", b =>
                {
                    b.HasOne("fms.Models.mtEmployee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortOfLoading", "portOfLoading")
                        .WithMany()
                        .HasForeignKey("portOfLoadingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtShipper", "shipper")
                        .WithMany()
                        .HasForeignKey("shipperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trSellingShipperDetail", b =>
                {
                    b.HasOne("fms.Models.mtConsignee", "consignee")
                        .WithMany()
                        .HasForeignKey("consigneeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany()
                        .HasForeignKey("containerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtCurrency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtLocation", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtOrders", "orders")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortOfDestination", "portOfDestination")
                        .WithMany()
                        .HasForeignKey("portOfDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trSellingShipper", "sellingShipper")
                        .WithMany("sellingShipperDetails")
                        .HasForeignKey("sellingShipperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtServices", "services")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "tax23")
                        .WithMany()
                        .HasForeignKey("taxId23")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "vat")
                        .WithMany()
                        .HasForeignKey("taxIdvat")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtVendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trSellingShipperDetailVendor", b =>
                {
                    b.HasOne("fms.Models.trSellingShipperDetail", "sellingShipperDetail")
                        .WithMany("sellingShipperDetailVendors")
                        .HasForeignKey("sellingShipperDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trSellingShipper", "sellingShipper")
                        .WithMany()
                        .HasForeignKey("sellingShipperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtVendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fms.Models.trSellingShipperService", b =>
                {
                    b.HasOne("fms.Models.mtContainer", "container")
                        .WithMany()
                        .HasForeignKey("containerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtPortOfDestination", "portOfDestination")
                        .WithMany()
                        .HasForeignKey("portOfDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.trSellingShipper", "sellingShipper")
                        .WithMany("sellingShipperServices")
                        .HasForeignKey("sellingShipperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtServices", "services")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "tax23")
                        .WithMany()
                        .HasForeignKey("taxId23")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fms.Models.mtTax", "vat")
                        .WithMany()
                        .HasForeignKey("taxIdvat")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
